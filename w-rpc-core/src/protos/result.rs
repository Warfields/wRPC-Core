// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `result.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct FnResult {
    // message fields
    pub Result: ::std::vec::Vec<u8>,
    pub exception: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FnResult {
    fn default() -> &'a FnResult {
        <FnResult as ::protobuf::Message>::default_instance()
    }
}

impl FnResult {
    pub fn new() -> FnResult {
        ::std::default::Default::default()
    }

    // bytes Result = 1;


    pub fn get_Result(&self) -> &[u8] {
        &self.Result
    }
    pub fn clear_Result(&mut self) {
        self.Result.clear();
    }

    // Param is passed by value, moved
    pub fn set_Result(&mut self, v: ::std::vec::Vec<u8>) {
        self.Result = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Result(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.Result
    }

    // Take field
    pub fn take_Result(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.Result, ::std::vec::Vec::new())
    }

    // string exception = 2;


    pub fn get_exception(&self) -> &str {
        &self.exception
    }
    pub fn clear_exception(&mut self) {
        self.exception.clear();
    }

    // Param is passed by value, moved
    pub fn set_exception(&mut self, v: ::std::string::String) {
        self.exception = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_exception(&mut self) -> &mut ::std::string::String {
        &mut self.exception
    }

    // Take field
    pub fn take_exception(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.exception, ::std::string::String::new())
    }
}

impl ::protobuf::Message for FnResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.Result)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.exception)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.Result.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.Result);
        }
        if !self.exception.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.exception);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.Result.is_empty() {
            os.write_bytes(1, &self.Result)?;
        }
        if !self.exception.is_empty() {
            os.write_string(2, &self.exception)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FnResult {
        FnResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "Result",
                    |m: &FnResult| { &m.Result },
                    |m: &mut FnResult| { &mut m.Result },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "exception",
                    |m: &FnResult| { &m.exception },
                    |m: &mut FnResult| { &mut m.exception },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FnResult>(
                    "FnResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FnResult {
        static mut instance: ::protobuf::lazy::Lazy<FnResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FnResult,
        };
        unsafe {
            instance.get(FnResult::new)
        }
    }
}

impl ::protobuf::Clear for FnResult {
    fn clear(&mut self) {
        self.Result.clear();
        self.exception.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FnResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FnResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ModuleResult {
    // message fields
    pub moduleName: ::std::string::String,
    pub available: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ModuleResult {
    fn default() -> &'a ModuleResult {
        <ModuleResult as ::protobuf::Message>::default_instance()
    }
}

impl ModuleResult {
    pub fn new() -> ModuleResult {
        ::std::default::Default::default()
    }

    // string moduleName = 1;


    pub fn get_moduleName(&self) -> &str {
        &self.moduleName
    }
    pub fn clear_moduleName(&mut self) {
        self.moduleName.clear();
    }

    // Param is passed by value, moved
    pub fn set_moduleName(&mut self, v: ::std::string::String) {
        self.moduleName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_moduleName(&mut self) -> &mut ::std::string::String {
        &mut self.moduleName
    }

    // Take field
    pub fn take_moduleName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.moduleName, ::std::string::String::new())
    }

    // bool available = 2;


    pub fn get_available(&self) -> bool {
        self.available
    }
    pub fn clear_available(&mut self) {
        self.available = false;
    }

    // Param is passed by value, moved
    pub fn set_available(&mut self, v: bool) {
        self.available = v;
    }
}

impl ::protobuf::Message for ModuleResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.moduleName)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.available = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.moduleName.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.moduleName);
        }
        if self.available != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.moduleName.is_empty() {
            os.write_string(1, &self.moduleName)?;
        }
        if self.available != false {
            os.write_bool(2, self.available)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ModuleResult {
        ModuleResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "moduleName",
                    |m: &ModuleResult| { &m.moduleName },
                    |m: &mut ModuleResult| { &mut m.moduleName },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "available",
                    |m: &ModuleResult| { &m.available },
                    |m: &mut ModuleResult| { &mut m.available },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ModuleResult>(
                    "ModuleResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ModuleResult {
        static mut instance: ::protobuf::lazy::Lazy<ModuleResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ModuleResult,
        };
        unsafe {
            instance.get(ModuleResult::new)
        }
    }
}

impl ::protobuf::Clear for ModuleResult {
    fn clear(&mut self) {
        self.moduleName.clear();
        self.available = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ModuleResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ModuleResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cresult.proto\x1a\x10RPC_Module.proto\"@\n\x08FnResult\x12\x16\n\
    \x06Result\x18\x01\x20\x01(\x0cR\x06Result\x12\x1c\n\texception\x18\x02\
    \x20\x01(\tR\texception\"L\n\x0cModuleResult\x12\x1e\n\nmoduleName\x18\
    \x01\x20\x01(\tR\nmoduleName\x12\x1c\n\tavailable\x18\x02\x20\x01(\x08R\
    \tavailableb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
